🔁 Git Rebase အကြောင်း (မြန်မာဘာသာ)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🧠 Rebase ဆိုတာဘာလဲ?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Git မှာ `rebase` ဆိုတာက တခြား branch တစ်ခုရဲ့ အခြေခံ commit ပေါ်ကို 
မင်းလုပ်ထားတဲ့ commits တွေကို ပြန်ဖြတ်ပြီး တာဝန်သစ်တင်ပြန်သွားတဲ့လိုမျိုး ဖြစ်ပါတယ်။

➡️ Merge နဲ့မတူတာက...
- Merge လုပ်တဲ့အခါမှာ commit history မှာ divergence တွေမကျန်ဘူး
- Rebase လုပ်တဲ့အခါမှာ commit history ကို linear ဖြစ်အောင် ပြန်စီတယ်

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📌 Syntax
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
$ git rebase <branch>

ဥပမာ:
$ git checkout feature
$ git rebase main

➡️ feature branch မှာရှိတဲ့ commits တွေကို main ရဲ့ နောက်ဆုံး commit အပေါ်ပြန်ဖြတ်တယ်။

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📈 Visualization
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Before rebase:

        A---B---C  (feature)
       /
  D---E---F       (main)

After:
                 A'--B'--C'  (feature rebased)
               /
  D---E---F     (main)

➡️ `A' B' C'` တွေဟာ A B C ကိုနမူနာယူပြီး ပြန်ဖန်တီးထားတာဖြစ်တယ်။

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🟢 Rebase ကို ဘယ်အချိန်မှာသုံးသင့်လဲ?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- Clean history လုပ်ချင်တဲ့အခါ
- Public repo မသုံးသေးတဲ့ local commits တွေကို organize ဖို့
- Merge commit မလိုချင်တဲ့အချိန်

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
❗ သတိထား!
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- Rebase က history ကို ပြန်ပြင်တယ် → ဒီကနေ push လုပ်လိုက်ရင် conflict ဖြစ်နိုင်တယ်။
- Public shared history တွေကို rebase မလုပ်သင့်ပါ။

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💡 နောက်ထပ်သုံးနည်း
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- `git rebase -i` → Interactive rebase (commit တွေ စီတန်းပြင်ရန်)
- `git pull --rebase` → Pull လုပ်တဲ့အခါ merge commit မပါအောင်ပြုလုပ်ရန်

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✅ အကျဉ်းချုပ်
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
- Rebase သည် commits များကို ပြန်ကူးပြောင်းခြင်းဖြစ်သည်။
- History ကို သန့်ရှင်းအောင် ပြုလုပ်နိုင်သည်။
- Merge လုပ်ပြီး commit ပေါင်းစည်းမှုမလိုချင်သူများအတွက် အသုံးဝင်သည်။
