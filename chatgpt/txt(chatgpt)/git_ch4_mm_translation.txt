အခန်း ၄ — အခြေခံ Snapshot များ (Basic Snapshotting)

📥 git add – ပြင်ဆင်မှုတွေကို Stage လုပ်ခြင်း

Git မှာ file တစ်ခုကို track လုပ်ဖို့၊ သို့မဟုတ် ပြောင်းလဲမှုတွေကို record လုပ်ဖို့ `git add` command ကိုသုံးပါတယ်။

```bash
$ git add file.txt
```

ဒီကိစ္စမှာ Git ဟာ `file.txt` ထဲမှာ ဘာပြောင်းလဲမှုပြုလုပ်ထားသည်ကို သိရှိပြီး၊ ဒါကို နောက်ထပ် `git commit` လုပ်သည့်အချိန်မှာ သမိုင်းထဲထည့်သွားမှာဖြစ်ပါတယ်။

---

🗑️ git rm – ဖိုင်ကို Git ထဲကဖျက်ခြင်း

Git ထဲက ဖိုင်ကိုဖျက်ချင်ရင် `git rm` သုံးရပါတယ်။  
ဒီအမှုဟာ working directory မှာလည်းဖျက်သွားပြီး၊ Git index ထဲကနေပါ ဖယ်ရှားသွားပါတယ်။

```bash
$ git rm file.txt
```

နောက်ထပ် `git commit` လုပ်တဲ့အခါမှာ file.txt ကိုဖျက်လိုက်တယ်ဆိုတဲ့ commit ဖြစ်သွားမယ်။

---

🔀 git mv – ဖိုင်အမည်ပြောင်းခြင်း

Git မှာ ဖိုင်နာမည်ပြောင်းခြင်း (rename) လုပ်ဖို့ `git mv` ကိုသုံးနိုင်ပါတယ်။

```bash
$ git mv old.txt new.txt
```

ဒါဟာ အကန့်အသတ်မရှိဖို့၊ `git rm old.txt && git add new.txt` လုပ်တာနဲ့ညီတူပါတယ်။

---

🙈 .gitignore – Git မသိစေချင်တဲ့ဖိုင်တွေ

Git ဟာ default အနေနဲ့ ဘာဖိုင်မဆို track လုပ်ဖို့ ကြိုးစားတတ်ပါတယ်။  
ဒါပေမယ့် build artifacts, log files, temporary files တို့လို မလိုချင်တဲ့ဖိုင်တွေရှိတတ်ပါတယ်။

အဲ့ဒါကြောင့် `.gitignore` ဖိုင်ထဲမှာ မပါစေရဖို့ ဖိုင်နာမည်တွေသတ်မှတ်နိုင်ပါတယ်။

ဥပမာ `.gitignore` ဖိုင်တစ်ခု:

```
*.log
*.tmp
build/
secret.txt
```

---

📌 အကျဉ်းချုပ်

Git မှာ snapshot တစ်ခုရဖို့အတွက်

1. `git add` – ပြောင်းလဲမှုတွေကို stage လုပ်တယ်
2. `git rm` – ဖျက်တဲ့ဖိုင်တွေကို ထည့်တယ်
3. `git mv` – ဖိုင်နာမည်ပြောင်းတယ်
4. `.gitignore` – မလိုအပ်တဲ့ဖိုင်တွေကို Git မသိစေဖို့

အခန်း ၄ မှာ ဒီလိုအခြေခံ snapshot နည်းလမ်းတွေကို လေ့လာပြီးဖြစ်တဲ့အတွက်၊ နောက်ထပ် commit history ကို ပိုပြီး ထိန်းချုပ်နိုင်ဖို့ တတ်မြောက်လာပြီဖြစ်ပါတယ်။
